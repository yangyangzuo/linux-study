环境配置:
    https://mp.weixin.qq.com/s/0gV7RhwZmcDNQluBjZIABw
    
编译指令:
    help:
        man gcc
    

编译c:
    //c文件结尾是.c
    gcc 源文件.c
    gcc -o 可执行文件名  源文件名.c

    //c++文件结尾是.cpp
    g++ -o 可执行文件名  源文件名.cpp



编译过程:
    1.预编译
    2.编译
    3.链接


    1.预编译做了什么：
        把源码中的#include包含该的头文件简单替换
        会把代码中的注释去掉
        预编译完成后,还是普通的c代码源文件
        例如：
            #man gcc
            -E  Stop after the preprocessing stage; do not run the compiler proper.  The output is in the form of preprocessed source code,
            which is sent to the standard output.
            Input files that don't require preprocessing are ignored.
            ....

            #gcc -o test 02system.c -E
            #file test
            test: C source, ASCII text

            得到一个test文件,发现:
            #include <stdlib.h>
            #include <stdio.h>
            c源代码中#include指令包含的文件,被包含到了生成的test文件中,
            实际上时把02system.c文件的内容copy到test中,然后在把#include语句替换成对应的包含的系统头文件内容



            预编译指令:
            #include,包含头文件
                例如:
                    使用printf函数，需要引入#include <stdio.h>头文件
                
                如果不使用可以不包含,例如：
                //#include <stdio.h>
                int main(){
                //	printf("hello world\n");
                    return 0;//默认情况下约定:return 0,表示成功,return -1表示失败,当然return 其他的数字也是可以的,但是没有意义
                }
                stdio.h这个文件在系统目录下,执行如下命令
                #sudo find / -name stdio.h
                /usr/include/stdio.h
                /usr/include/c++/8/tr1/stdio.h
                /usr/include/x86_64-linux-gnu/bits/stdio.h
                find: ‘/run/user/1000/doc’: Permission denied
                find: ‘/run/user/1000/gvfs’: Permission denied

                如果文件在系统目录下需要使用#include <文件名>
                如果文件在当前目录下需要使用#include "文件名"

                main函数的返回类型可以是void(下面的写法,不符合c++语法,如果把文件改成.cpp,则编译会报错,所以最好写成上面的返回类型为int)
                #include <stdio.h>
                void main(){
                    printf("hello world");
                }
                或者
                #include <stdio.h>
                void main(){
                    printf("hello world");
                    return;
                }


    2.编译
        编译成二进制文件
        
        #gcc -o  test 02system.c -c
        #man gcc
        -c  Compile or assemble the source files, but do not link.  The linking stage simply is not done.  The ultimate output is in the
        form of an object file for each source file.

        By default, the object file name for a source file is made by replacing the suffix .c, .i, .s, etc., with .o.

        Unrecognized input files, not requiring compilation or assembly, are ignored.
        ...


        //查看文件类型
        #file test
        test: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped
        但是当前文件不能执行
        #chmod u+x test
        #./test
        zsh: exec format error: ./test


    3.链接
        把系统库函数和我们编译的二进制文件合并成一个二进制文件

        在第2步中编译的文件还不能执行,因为代码中可能用到了系统的一些库函数，
        例如:printf,此时需要把系统的这些库函数,和我们的二进制程序进行链接

        -o只是指定输出文件名称,链接实际上时不需要加参数的
        gcc中没有单独的链接参数
        #gcc -o test 02system.c
        -o file
           Place output in file file.  This applies to whatever sort of output is being produced, whether it be an executable file, an
           object file, an assembler file or preprocessed C code.

           If -o is not specified, the default is to put an executable file in a.out, the object file for source.suffix in source.o, its
           assembler file in source.s, a precompiled header file in source.suffix.gch, and all preprocessed C source on standard output.

        linux下可以使用ldd命令查看,链接后的可执行文件,链接了哪几个库
        windows下可以使用Dependency Walker查看,http://www.dependencywalker.com/
        #ldd test 
        linux-vdso.so.1 (0x00007ffc3d353000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8c2693f000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f8c26b4b000)




















