1 Introduction
1引言
• What is Bash? 什么是 Bash？:	  	A short description of Bash. 对 Bash 的简短描述
• What is a shell? 什么是贝壳？:	  	A brief introduction to shells. 贝壳简介




1.1 What is Bash?


Bash is the shell, or command language interpreter, for the GNU operating system. 
The name is an acronym for the ‘Bourne-Again SHell’, a pun on Stephen Bourne, the author of the direct ancestor of the current Unix shell sh, 
which appeared in the Seventh Edition Bell Labs Research version of Unix.
Bash 是 GNU 操作系统的 shell 或命令语言解释器。
这个名字是“ Bourne-Again SHell”的首字母缩写，是对斯蒂芬 · 伯恩的一个双关语，是目前 Unix SHell sh 的直系祖先的作者，出现在 Unix 的第七版贝尔实验室研究版本中。


Bash is largely compatible with sh and incorporates useful features from the Korn shell ksh and the C shell csh. 
It is intended to be a conformant implementation of the IEEE POSIX Shell and Tools portion of the IEEE POSIX specification (IEEE Standard 1003.1). 
It offers functional improvements over sh for both interactive and programming use.
Bash 基本上与 sh 兼容，并集成了 Korn shell ksh 和 c shell csh 的有用特性。
它是 IEEE POSIX 规范(IEEE 标准1003.1)的 POSIX 外壳和工具部分的一个整合实现。
它为交互式和编程使用提供了比 sh 更好的功能改进。


While the GNU operating system provides other shells, including a version of csh, Bash is the default shell. 
Like other GNU software, Bash is quite portable. 
It currently runs on nearly every version of Unix and a few other operating systems - independently-supported ports exist for MS-DOS, OS/2, and Windows platforms.
GNU 操作系统提供了其他 shell，包括 csh 版本，而 Bash 是默认的 shell。
和其他 GNU 软件一样，Bash 非常便携。
目前，它几乎运行在所有版本的 Unix 和其他一些操作系统上—— MS-DOS、 OS/2和 Windows 平台上都有独立支持的端口。







1.2 What is a shell?

At its base, a shell is simply a macro processor that executes commands. 
The term macro processor means functionality where text and symbols are expanded to create larger expressions.
在其基础上，shell 只是一个执行命令的宏处理器。
宏处理器这个术语是指文本和符号被展开以创建更大的表达式的功能。


A Unix shell is both a command interpreter and a programming language. 
As a command interpreter, the shell provides the user interface to the rich set of GNU utilities. 
The programming language features allow these utilities to be combined. 
Files containing commands can be created, and become commands themselves. 
These new commands have the same status as system commands in directories such as /bin, allowing users or groups to establish custom environments to automate their common tasks.
Unix shell 既是命令解释器，又是编程语言。
作为一个命令解释器，shell 为丰富的 GNU 实用程序集提供用户界面。
编程语言特性允许组合这些实用程序。
可以创建包含命令的文件，并使其本身成为命令。这些新命令与/bin 等目录中的系统命令具有相同的状态，允许用户或组建立自定义环境来自动化其常见任务。


Shells may be used interactively or non-interactively. 
In interactive mode, they accept input typed from the keyboard. 
When executing non-interactively, shells execute commands read from a file.
外壳可以交互使用，也可以非交互使用。
在交互模式下，他们接受键盘输入。
当以非交互方式执行时，shell 将执行从文件中读取的命令。


A shell allows execution of GNU commands, both synchronously and asynchronously. 
The shell waits for synchronous commands to complete before accepting more input; 
asynchronous commands continue to execute in parallel with the shell while it reads and executes additional commands. 
The redirection constructs permit fine-grained control of the input and output of those commands. 
Moreover, the shell allows control over the contents of commands’ environments.
Shell 允许同步和异步地执行 GNU 命令。
Shell 在接受更多输入之前等待同步命令完成; 在读取和执行其他命令时，异步命令继续与 shell 并行执行。
重定向构造允许对这些命令的输入和输出进行细粒度的控制。此外，shell 允许控制命令环境的内容。


Shells also provide a small set of built-in commands (builtins) implementing functionality impossible or inconvenient to obtain via separate utilities. 
For example, cd, break, continue, and exec cannot be implemented outside of the shell because they directly manipulate the shell itself. 
The history, getopts, kill, or pwd builtins, among others, could be implemented in separate utilities, 
but they are more convenient to use as builtin commands. 
All of the shell builtins are described in subsequent sections.
Shell 还提供一组内置命令(内置命令) ，实现通过单独的实用程序无法获得或不方便获得的功能。
例如，cd、 break、 continue 和 exec 不能在 shell 外部实现，因为它们直接操作 shell 本身。
历史、 getopt、 kill 或 pwd 内置程序等可以在单独的实用程序中实现，但是它们更方便地用作内置命令。
所有的壳内置描述在随后的部分。


While executing commands is essential, most of the power (and complexity) of shells is due to their embedded programming languages. 
Like any high-level language, the shell provides variables, flow control constructs, quoting, and functions.
虽然执行命令是必不可少的，但 shell 的大部分能力(和复杂性)都归功于它们的嵌入式编程语言。
与任何高级语言一样，shell 提供了变量、流控制结构、引用和函数。


Shells offer features geared specifically for interactive use rather than to augment the programming language. 
These interactive features include job control, command line editing, command history and aliases. 
Each of these features is described in this manual.
Shell 提供的特性专门用于交互式使用，而不是增强编程语言。
这些交互特性包括作业控制、命令行编辑、命令历史记录和别名。
这些特性在本手册中都有描述。

