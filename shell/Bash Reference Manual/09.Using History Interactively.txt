

9 Using History Interactively
9交互式使用历史
This chapter describes how to use the GNU History Library interactively, from a user’s standpoint. It should be considered a user’s guide. For information on using the GNU History Library in other programs, see the GNU Readline Library Manual.

本章从用户的角度描述了如何交互式地使用 GNU 历史库。它应该被认为是一个用户指南。有关在其他程序中使用 GNU 历史库的信息，请参阅 GNU Readline Library Manual。

• Bash History Facilities 历史设施:	  	How Bash lets you manipulate your command history. Bash 如何让您操作命令历史记录
• Bash History Builtins 重击历史内置程序:	  	The Bash builtin commands that manipulate the command history. 操作命令历史记录的 Bash 内置命令
• History Interaction 历史互动:	  	What it feels like using History as a user. 作为用户使用 History 是什么感觉
Next: Bash History Builtins, Up: Using History Interactively   [Contents][Index]

下一步: Bash 历史构建，向上: 交互使用历史[目录][索引]

9.1 Bash History Facilities
9.1 Bash 历史设施
When the -o history option to the set builtin is enabled (see The Set Builtin), the shell provides access to the command history, the list of commands previously typed. The value of the HISTSIZE shell variable is used as the number of commands to save in a history list. The text of the last $HISTSIZE commands (default 500) is saved. The shell stores each command in the history list prior to parameter and variable expansion but after history expansion is performed, subject to the values of the shell variables HISTIGNORE and HISTCONTROL.

当启用 Set Builtin 的-o history 选项时(参见 The Set Builtin) ，shell 提供了对命令 history 的访问，这是之前输入的命令列表。HISTSIZE shell 变量的值用作要保存在历史列表中的命令数。保存最后的 $HISTSIZE 命令(默认值为500)的文本。Shell 在参数和变量展开之前，但是在历史展开之后，根据 shell 变量 HISTIGNORE 和 HISTCONTROL 的值，将每个命令存储在历史列表中。

When the shell starts up, the history is initialized from the file named by the HISTFILE variable (default ~/.bash_history). The file named by the value of HISTFILE is truncated, if necessary, to contain no more than the number of lines specified by the value of the HISTFILESIZE variable. When a shell with history enabled exits, the last $HISTSIZE lines are copied from the history list to the file named by $HISTFILE. If the histappend shell option is set (see Bash Builtins), the lines are appended to the history file, otherwise the history file is overwritten. If HISTFILE is unset, or if the history file is unwritable, the history is not saved. After saving the history, the history file is truncated to contain no more than $HISTFILESIZE lines. If HISTFILESIZE is unset, or set to null, a non-numeric value, or a numeric value less than zero, the history file is not truncated.

当 shell 启动时，历史记录从由 HISTFILE 变量命名的文件初始化(默认值 ~/)。历史)。如果有必要，由 histfileize 值命名的文件将被截断，使其不超过 HISTFILESIZE 变量值指定的行数。当启用历史记录的 shell 退出时，最后的 $HISTSIZE 行将从历史记录列表复制到由 $HISTFILE 命名的文件。如果设置了 histappend shell 选项(参见 Bash Builtins) ，那么这些行将附加到历史文件，否则将覆盖历史文件。如果 HISTFILE 未设置，或者历史文件不可写，则不保存历史记录。保存历史记录后，历史文件被截断为不包含多于 $HISTFILESIZE 行。如果 HISTFILESIZE 未设置，或设置为 null、非数值或小于零的数值，则不截断历史文件。

If the HISTTIMEFORMAT is set, the time stamp information associated with each history entry is written to the history file, marked with the history comment character. When the history file is read, lines beginning with the history comment character followed immediately by a digit are interpreted as timestamps for the following history entry.

如果设置了 HISTTIMEFORMAT，则将与每个历史条目关联的时间戳信息写入历史文件，并用历史注释字符标记。当读取历史记录文件时，以历史记录注释字符开头的行后面紧跟一个数字，将被解释为以下历史记录条目的时间戳。

The builtin command fc may be used to list or edit and re-execute a portion of the history list. The history builtin may be used to display or modify the history list and manipulate the history file. When using command-line editing, search commands are available in each editing mode that provide access to the history list (see Commands For History).

内置命令 fc 可用于列出或编辑和重新执行历史记录列表的一部分。内置的历史记录可用于显示或修改历史记录列表和操作历史记录文件。当使用命令行编辑时，在每种编辑模式下都可以使用搜索命令，这些命令提供对历史记录列表的访问(请参阅历史记录命令)。

The shell allows control over which commands are saved on the history list. The HISTCONTROL and HISTIGNORE variables may be set to cause the shell to save only a subset of the commands entered. The cmdhist shell option, if enabled, causes the shell to attempt to save each line of a multi-line command in the same history entry, adding semicolons where necessary to preserve syntactic correctness. The lithist shell option causes the shell to save the command with embedded newlines instead of semicolons. The shopt builtin is used to set these options. See The Shopt Builtin, for a description of shopt.

Shell 允许控制在历史记录列表中保存哪些命令。可以设置 HISTCONTROL 和 HISTIGNORE 变量，使 shell 只保存输入命令的子集。如果启用 cmdlet shell 选项，shell 将尝试在同一历史条目中保存多行命令的每一行，并在必要时添加分号以保持语法正确性。Lithist shell 选项使 shell 用嵌入的换行代替分号来保存命令。Shopt 内置程序用于设置这些选项。参见 The Shopt Builtin，获得对 Shopt 的描述。

Next: History Interaction, Previous: Bash History Facilities, Up: Using History Interactively   [Contents][Index]

下一步: 历史交互，上一步: Bash 历史工具，向上: 交互使用历史[目录][索引]

9.2 Bash History Builtins
Bash provides two builtin commands which manipulate the history list and history file.

Bash 提供了两个内置命令，它们可以操作历史列表和历史文件。

fc
fc [-e ename] [-lnr] [first] [last]
fc -s [pat=rep] [command]
The first form selects a range of commands from first to last from the history list and displays or edits and re-executes them. Both first and last may be specified as a string (to locate the most recent command beginning with that string) or as a number (an index into the history list, where a negative number is used as an offset from the current command number). If last is not specified, it is set to first. If first is not specified, it is set to the previous command for editing and -16 for listing. If the -l flag is given, the commands are listed on standard output. The -n flag suppresses the command numbers when listing. The -r flag reverses the order of the listing. Otherwise, the editor given by ename is invoked on a file containing those commands. If ename is not given, the value of the following variable expansion is used: ${FCEDIT:-${EDITOR:-vi}}. This says to use the value of the FCEDIT variable if set, or the value of the EDITOR variable if that is set, or vi if neither is set. When editing is complete, the edited commands are echoed and executed.

第一个窗体从历史列表中选择从第一个到最后一个的一系列命令，并显示或编辑它们并重新执行它们。可以将 first 和 last 指定为字符串(以查找以该字符串开头的最新命令)或数字(历史列表中的索引，其中负数用作当前命令号的偏移量)。如果没有指定 last，则将其设置为 first。如果没有指定 first，则将其设置为前面的命令进行编辑，并将 -16设置为清单。如果给出了 -l 标志，则在标准输出中列出命令。N 标志在列出时取消命令编号。R 标志反转清单的顺序。否则，将对包含这些命令的文件调用由 ename 提供的编辑器。如果没有给出 ename，则使用以下变量展开的值: ${ FCEDIT:-${ EDITOR:-vi }}。这意味着如果设置了 FCEDIT 变量的值，或者如果设置了 EDITOR 变量的值，或者如果两者都没有设置，则使用 vi。编辑完成后，将回显和执行编辑过的命令。

In the second form, command is re-executed after each instance of pat in the selected command is replaced by rep. command is intepreted the same as first above.

在第二种形式中，当所选命令中的每个 pat 实例被 rep. 命令替换后，将重新执行命令。

A useful alias to use with the fc command is r='fc -s', so that typing ‘r cc’ runs the last command beginning with cc and typing ‘r’ re-executes the last command (see Aliases).

与 fc 命令一起使用的一个有用的别名是 r = ‘ fc-s’ ，因此键入‘ r cc’运行以 cc 开头的最后一个命令，并键入‘ r’重新执行最后一个命令(请参见别名)。

history
history [n]
history -c
history -d offset
history -d start-end
history [-anrw] [filename]
history -ps arg
With no options, display the history list with line numbers. Lines prefixed with a ‘*’ have been modified. An argument of n lists only the last n lines. If the shell variable HISTTIMEFORMAT is set and not null, it is used as a format string for strftime to display the time stamp associated with each displayed history entry. No intervening blank is printed between the formatted time stamp and the history line.

如果没有选项，则显示带有行号的历史记录列表。前缀为“ * ”的行已被修改。一个 n 的参数只列出最后 n 行。如果 shell 变量 HISTTIMEFORMAT 被设置为非空，它将被用作 strftime 的格式字符串，以显示与每个显示的历史记录条目相关联的时间戳。在格式化时间戳和历史记录行之间不打印中间空白。

Options, if supplied, have the following meanings:

如果提供了选项，其含义如下:

-c
Clear the history list. This may be combined with the other options to replace the history list completely.

清除历史记录列表。这可能与其他选项结合以完全替换历史记录列表。

-d offset
Delete the history entry at position offset. If offset is positive, it should be specified as it appears when the history is displayed. If offset is negative, it is interpreted as relative to one greater than the last history position, so negative indices count back from the end of the history, and an index of ‘-1’ refers to the current history -d command.

删除位置偏移处的历史记录项。如果偏移量为正值，则应在显示历史记录时指定该偏移量。如果偏移量为负，则解释为相对于比上一个历史记录位置大一个，因此负指数从历史记录结束时计数，“-1”的索引引用当前的 history-d 命令。

-d start-end
Delete the history entries between positions start and end, inclusive. Positive and negative values for start and end are interpreted as described above.

删除位置开始和结束之间的历史条目，包括。开始和结束的正值和负值解释如上所述。

-a
Append the new history lines to the history file. These are history lines entered since the beginning of the current Bash session, but not already appended to the history file.

将新的历史行附加到历史文件。这些是自当前 Bash 会话开始以来输入的历史记录行，但尚未附加到历史记录文件中。

-n
Append the history lines not already read from the history file to the current history list. These are lines appended to the history file since the beginning of the current Bash session.

将尚未从历史文件中读取的历史行追加到当前历史列表中。这些行是自当前 Bash 会话开始以来附加到历史文件的。

-r
Read the history file and append its contents to the history list.

读取历史文件并将其内容附加到历史列表中。

-w
Write out the current history list to the history file.

将当前历史记录列表写入历史记录文件。

-p
Perform history substitution on the args and display the result on the standard output, without storing the results in the history list.

在 args 上执行历史替换，并在标准输出上显示结果，而不在历史列表中存储结果。

-s
The args are added to the end of the history list as a single entry.

Args 作为单个条目添加到历史列表的末尾。

When any of the -w, -r, -a, or -n options is used, if filename is given, then it is used as the history file. If not, then the value of the HISTFILE variable is used.

当使用任何 -w、-r、-a 或-n 选项时，如果给出了文件名，则将其用作历史文件。如果没有，则使用 HISTFILE 变量的值。

Previous: Bash History Builtins, Up: Using History Interactively   [Contents][Index]

上一篇: Bash 历史构建，向上: 交互使用历史[目录][索引]

9.3 History Expansion
9.3历史扩展
The History library provides a history expansion feature that is similar to the history expansion provided by csh. This section describes the syntax used to manipulate the history information.

历史库提供了一个历史扩展特性，类似于 csh 提供的历史扩展。本节描述用于操作历史记录信息的语法。

History expansions introduce words from the history list into the input stream, making it easy to repeat commands, insert the arguments to a previous command into the current input line, or fix errors in previous commands quickly.

历史扩展将历史列表中的单词引入到输入流中，使得重复命令、将参数插入前一个命令到当前输入行或快速修复前一个命令中的错误变得更加容易。

History expansion is performed immediately after a complete line is read, before the shell breaks it into words, and is performed on each line individually. Bash attempts to inform the history expansion functions about quoting still in effect from previous lines.

在读取完整的一行之后，在 shell 将其分解为单词之前，立即执行历史展开，并在每一行上单独执行。Bash 尝试告知历史扩展函数有关引用仍然有效的前几行。

History expansion takes place in two parts. The first is to determine which line from the history list should be used during substitution. The second is to select portions of that line for inclusion into the current one. The line selected from the history is called the event, and the portions of that line that are acted upon are called words. Various modifiers are available to manipulate the selected words. The line is broken into words in the same fashion that Bash does, so that several words surrounded by quotes are considered one word. History expansions are introduced by the appearance of the history expansion character, which is ‘!’ by default.

历史的扩展分为两部分。第一个是确定在替换期间应该使用历史列表中的哪一行。第二种方法是选择该行的一部分并将其包含到当前行中。从历史记录中选择的行称为事件，而作用于该行的部分称为单词。可以使用各种修饰符来操作选定的单词。该行以与 Bash 相同的方式被分割成单词，因此将几个带引号的单词视为一个单词。历史扩展是由历史扩展字符“ ! ”的出现引入的默认。

History expansion implements shell-like quoting conventions: a backslash can be used to remove the special handling for the next character; single quotes enclose verbatim sequences of characters, and can be used to inhibit history expansion; and characters enclosed within double quotes may be subject to history expansion, since backslash can escape the history expansion character, but single quotes may not, since they are not treated specially within double quotes.

History 扩展实现了类似 shell 的引用约定: 可以使用反斜杠来删除对下一个字符的特殊处理; 单引号逐字包含字符序列，并且可以用来禁止历史扩展; 双引号中包含的字符可以进行历史扩展，因为反斜杠可以转义历史扩展字符，但单引号可以不这样做，因为它们在双引号中不被特殊处理。

When using the shell, only ‘\’ and ‘'’ may be used to escape the history expansion character, but the history expansion character is also treated as quoted if it immediately precedes the closing double quote in a double-quoted string.

在使用 shell 时，只能使用‘’和‘’来转义历史扩展字符，但如果历史扩展字符紧接在双引号字符串中的结束双引号之前，则也将其视为引用字符。

Several shell options settable with the shopt builtin (see The Shopt Builtin) may be used to tailor the behavior of history expansion. If the histverify shell option is enabled, and Readline is being used, history substitutions are not immediately passed to the shell parser. Instead, the expanded line is reloaded into the Readline editing buffer for further modification. If Readline is being used, and the histreedit shell option is enabled, a failed history expansion will be reloaded into the Readline editing buffer for correction. The -p option to the history builtin command may be used to see what a history expansion will do before using it. The -s option to the history builtin may be used to add commands to the end of the history list without actually executing them, so that they are available for subsequent recall. This is most useful in conjunction with Readline.

可以使用 Shopt Builtin 设置的几个 shell 选项(参见 Shopt Builtin)来调整历史扩展的行为。如果启用了 histverify shell 选项，并且使用了 Readline，则不会立即将历史替换传递给 shell 解析器。相反，扩展行将重新加载到 Readline 编辑缓冲区中，以便进行进一步的修改。如果正在使用 Readline，并且启用了 histreedit shell 选项，则失败的历史记录扩展将重新加载到 Readline 编辑缓冲区中进行更正。在使用历史内置命令之前，可以使用-p 选项查看历史扩展将做什么。可以使用内置历史记录的-s 选项将命令添加到历史记录列表的末尾，而不需要实际执行它们，这样它们就可以在以后的回收中使用。这是最有用的结合阅读线。

The shell allows control of the various characters used by the history expansion mechanism with the histchars variable, as explained above (see Bash Variables). The shell uses the history comment character to mark history timestamps when writing the history file.

Shell 允许通过 histchars 变量控制历史扩展机制使用的各种字符，如上所述(请参见 Bash 变量)。当编写历史文件时，shell 使用历史注释字符来标记历史时间戳。

• Event Designators 事件指示器:	  	How to specify which history line to use. 如何指定要使用的历史记录行
• Word Designators 文字指示器:	  	Specifying which words are of interest. 指定感兴趣的单词
• Modifiers 修饰语:	  	Modifying the results of substitution. 修改替代的结果
Next: Word Designators, Up: History Interaction   [Contents][Index]

下一步: 单词指示器，向上: 历史交互[目录][索引]

9.3.1 Event Designators
9.3.1事件指示器
An event designator is a reference to a command line entry in the history list. Unless the reference is absolute, events are relative to the current position in the history list.

事件指示器是对历史记录列表中的命令行条目的引用。除非引用是绝对的，否则事件相对于历史列表中的当前位置。

!
Start a history substitution, except when followed by a space, tab, the end of the line, ‘=’ or ‘(’ (when the extglob shell option is enabled using the shopt builtin).

开始历史替换，除非后面跟着空格、 tab、行尾“ = ”或“(”(使用 shopt builtin 启用 extglob shell 选项)。

!n
Refer to command line n.

参考命令行 n。

!-n
Refer to the command n lines back.

请参考后面 n 行的命令。

!!
Refer to the previous command. This is a synonym for ‘!-1’.

参考前面的命令。这是“ !-1”的同义词。

!string
Refer to the most recent command preceding the current position in the history list starting with string.

请参考历史记录列表中以字符串开始的当前位置前面的最新命令。

!?string[?]
Refer to the most recent command preceding the current position in the history list containing string. The trailing ‘?’ may be omitted if the string is followed immediately by a newline.

请参考包含字符串的历史列表中当前位置前面的最新命令。拖尾的‘ ? ’如果字符串后面紧接着换行符，则可以省略。

^string1^string2^
Quick Substitution. Repeat the last command, replacing string1 with string2. Equivalent to !!:s/string1/string2/.

快速替换。重复最后一个命令，用 string2替换 string1。等价于! ! : s/string1/string2/。

!#
The entire command line typed so far.

到目前为止输入的整个命令行。

Next: Modifiers, Previous: Event Designators, Up: History Interaction   [Contents][Index]

下一步: 修饰符，上一步: 事件指示器，上一步: 历史交互[目录][索引]

9.3.2 Word Designators
Word designators are used to select desired words from the event. A ‘:’ separates the event specification from the word designator. It may be omitted if the word designator begins with a ‘^’, ‘$’, ‘*’, ‘-’, or ‘%’. Words are numbered from the beginning of the line, with the first word being denoted by 0 (zero). Words are inserted into the current line separated by single spaces.

单词指示器用于从事件中选择所需的单词。一个‘ : ’将事件规范与单词指示符分开。如果单词指示符以“ ^ ”、“ $”、“ * ”、“-”或“% ”开头，则可以省略。单词从行首开始编号，第一个单词用0(零)表示。单词被插入由单个空格分隔的当前行中。

For example,

比如说,

!!
designates the preceding command. When you type this, the preceding command is repeated in toto.

指定前面的命令。当您键入此命令时，前面的命令将全部重复。

!!:$
designates the last argument of the preceding command. This may be shortened to !$.

指定前面命令的最后一个参数。

!fi:2
designates the second argument of the most recent command starting with the letters fi.

指定最新命令的第二个参数，以字母 fi 开头。

Here are the word designators:

这里有一个单词 designators:

0 (zero)
The 0th word. For many applications, this is the command word.

第0个字。对于许多应用程序来说，这是命令字。

n
The nth word.

第 n 个字。

^
The first argument; that is, word 1.

第一个论点，也就是单词1。

$
The last argument.

最后一个论点。

%
The word matched by the most recent ‘?string?’ search.

与最近的“ ? 字符串? ”搜索匹配的单词。

x-y
A range of words; ‘-y’ abbreviates ‘0-y’.

一系列单词; “-y”缩写为“0-y”。

*
All of the words, except the 0th. This is a synonym for ‘1-$’. It is not an error to use ‘*’ if there is just one word in the event; the empty string is returned in that case.

所有的单词，除了第0个。这是“1-$”的同义词。如果事件中只有一个单词，则使用‘ * ’不会出错; 在这种情况下，将返回空字符串。

x*
Abbreviates ‘x-$’

缩写为“ x-$”

x-
Abbreviates ‘x-$’ like ‘x*’, but omits the last word.

将“ x-$”缩写为“ x * ” ，但省略了最后一个单词。

If a word designator is supplied without an event specification, the previous command is used as the event.

如果提供的单词指示符没有事件规范，则使用前面的命令作为事件。

Previous: Word Designators, Up: History Interaction   [Contents][Index]

上一篇: 单词指示器，上一篇: 历史交互[目录][索引]

9.3.3 Modifiers
9.3.3修饰语
After the optional word designator, you can add a sequence of one or more of the following modifiers, each preceded by a ‘:’.

在可选的单词指示符之后，您可以添加一个或多个以下修饰符的序列，每个修饰符前面都有一个‘ : ’。

h
Remove a trailing pathname component, leaving only the head.

删除尾随的路径名组件，只留下头部。

t
Remove all leading pathname components, leaving the tail.

删除所有前导路径名组件，保留尾部。

r
Remove a trailing suffix of the form ‘.suffix’, leaving the basename.

删除表单“ . suffix”的尾随后缀，保留 basename。

e
Remove all but the trailing suffix.

删除除后缀以外的所有后缀。

p
Print the new command but do not execute it.

打印新命令，但不执行它。

q
Quote the substituted words, escaping further substitutions.

引用被替换的单词，避免进一步的替换。

x
Quote the substituted words as with ‘q’, but break into words at spaces, tabs, and newlines.

将替换的单词引用为‘ q’ ，但在空格、制表符和换行符处拆分为单词。

s/old/new/
Substitute new for the first occurrence of old in the event line. Any delimiter may be used in place of ‘/’. The delimiter may be quoted in old and new with a single backslash. If ‘&’ appears in new, it is replaced by old. A single backslash will quote the ‘&’. The final delimiter is optional if it is the last character on the input line.

用 new 替换事件行中第一次出现的旧代码。可以使用任何分隔符来代替“/”。分隔符可以用一个反斜杠在新旧两种语言中引用。如果‘ & ’以新的形式出现，就会被旧的形式取代。一个单独的反斜杠将引用 & 。如果最终分隔符是输入行上的最后一个字符，则它是可选的。

&
Repeat the previous substitution.

重复前面的替换。

g
a
Cause changes to be applied over the entire event line. Used in conjunction with ‘s’, as in gs/old/new/, or with ‘&’.

使更改应用于整个事件行。与“ s”连用，如 gs/old/new/，或与“ & ”连用。

G
Apply the following ‘s’ modifier once to each word in the event.

对事件中的每个单词应用以下“ s”修饰语一次。

Next: Reporting Bugs, Previous: Using History Interactively, Up: Top   [Contents][Index]

下一步: 报告错误，上一步: 交互使用历史，向上: 顶部[目录][索引]


